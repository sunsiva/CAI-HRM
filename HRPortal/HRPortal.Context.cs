//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRPortal
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HRPortalEntities : DbContext
    {
        public HRPortalEntities()
            : base("name=HRPortalEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C__MigrationHistory> C__MigrationHistory { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<CANDIDATE> CANDIDATES { get; set; }
        public virtual DbSet<ERROR_LOG> ERROR_LOG { get; set; }
        public virtual DbSet<EVENTSCHEDULE> EVENTSCHEDULEs { get; set; }
        public virtual DbSet<EXCEPTION_LOGGING> EXCEPTION_LOGGING { get; set; }
        public virtual DbSet<JOB_HISTORY> JOB_HISTORY { get; set; }
        public virtual DbSet<JOBPOSTING> JOBPOSTINGs { get; set; }
        public virtual DbSet<STATUS_HISTORY> STATUS_HISTORY { get; set; }
        public virtual DbSet<STATUS_MASTER> STATUS_MASTER { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UserXRole> UserXRoles { get; set; }
        public virtual DbSet<VENDOR_MASTER> VENDOR_MASTER { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<JOBXVENDOR> JOBXVENDORs { get; set; }
    
        public virtual ObjectResult<getSearchResults_Result> getSearchResults(string positionName, string candidateName, string statusIds, string partner, string startDate, string endDate, string flag)
        {
            var positionNameParameter = positionName != null ?
                new ObjectParameter("PositionName", positionName) :
                new ObjectParameter("PositionName", typeof(string));
    
            var candidateNameParameter = candidateName != null ?
                new ObjectParameter("CandidateName", candidateName) :
                new ObjectParameter("CandidateName", typeof(string));
    
            var statusIdsParameter = statusIds != null ?
                new ObjectParameter("StatusIds", statusIds) :
                new ObjectParameter("StatusIds", typeof(string));
    
            var partnerParameter = partner != null ?
                new ObjectParameter("Partner", partner) :
                new ObjectParameter("Partner", typeof(string));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var flagParameter = flag != null ?
                new ObjectParameter("flag", flag) :
                new ObjectParameter("flag", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getSearchResults_Result>("getSearchResults", positionNameParameter, candidateNameParameter, statusIdsParameter, partnerParameter, startDateParameter, endDateParameter, flagParameter);
        }
    
        [DbFunction("HRPortalEntities", "fnSplitString")]
        public virtual IQueryable<string> fnSplitString(string @string, string delimiter)
        {
            var stringParameter = @string != null ?
                new ObjectParameter("string", @string) :
                new ObjectParameter("string", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("delimiter", delimiter) :
                new ObjectParameter("delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[HRPortalEntities].[fnSplitString](@string, @delimiter)", stringParameter, delimiterParameter);
        }
    
        public virtual ObjectResult<rptGetCandidatesStaging_Result> rptGetCandidatesStaging(string status, Nullable<bool> round1, Nullable<bool> round2, Nullable<bool> round3, string partner)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var round1Parameter = round1.HasValue ?
                new ObjectParameter("Round1", round1) :
                new ObjectParameter("Round1", typeof(bool));
    
            var round2Parameter = round2.HasValue ?
                new ObjectParameter("Round2", round2) :
                new ObjectParameter("Round2", typeof(bool));
    
            var round3Parameter = round3.HasValue ?
                new ObjectParameter("Round3", round3) :
                new ObjectParameter("Round3", typeof(bool));
    
            var partnerParameter = partner != null ?
                new ObjectParameter("Partner", partner) :
                new ObjectParameter("Partner", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetCandidatesStaging_Result>("rptGetCandidatesStaging", statusParameter, round1Parameter, round2Parameter, round3Parameter, partnerParameter);
        }
    
        public virtual ObjectResult<rptGetCandidatesStagingByPartner_Result> rptGetCandidatesStagingByPartner(string status, Nullable<bool> round1, Nullable<bool> round2, Nullable<bool> round3, string partner)
        {
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var round1Parameter = round1.HasValue ?
                new ObjectParameter("Round1", round1) :
                new ObjectParameter("Round1", typeof(bool));
    
            var round2Parameter = round2.HasValue ?
                new ObjectParameter("Round2", round2) :
                new ObjectParameter("Round2", typeof(bool));
    
            var round3Parameter = round3.HasValue ?
                new ObjectParameter("Round3", round3) :
                new ObjectParameter("Round3", typeof(bool));
    
            var partnerParameter = partner != null ?
                new ObjectParameter("Partner", partner) :
                new ObjectParameter("Partner", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<rptGetCandidatesStagingByPartner_Result>("rptGetCandidatesStagingByPartner", statusParameter, round1Parameter, round2Parameter, round3Parameter, partnerParameter);
        }
    }
}
