@model CANDIDATE
@using HRPortal.Helper;
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var JCod = Request.QueryString.Count>0? Request.QueryString[0]:string.Empty;
    bool isSuperAdmin = HelperFuntions.HasValue(Session[CacheKey.RoleName.ToString()]).ToUpper().Contains("ADMIN") ? true : false;
}

<h2 align="center">Create Candidate Profile</h2>

@using (Html.BeginForm("Create", "Candidate", FormMethod.Post, new { enctype = "multipart/form-data",@Id="CandidateForm" }))
    {
        @Html.AntiForgeryToken()
        <span align="right" id="errMsg" class="text-danger col-lg-offset-4"></span>
        <div class="form-horizontal">
        <h4>@*CANDIDATE*@</h4>
        <hr />
        
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
             <div class="form-group">
                <span align="right" class="text-danger">@ViewBag.IsExist</span>
                 @Html.HiddenFor(model => model.JOB_ID)
                 @Html.Hidden("hdnIsValidated")
            </div>
            <div class="form-group">
                @Html.Label("JOB CODE", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.Label(JCod, new { htmlAttributes = new { @class = "form-control"} })
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.CANDIDATE_NAME, "CANDIDATE NAME", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CANDIDATE_NAME, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @Html.ValidationMessageFor(model => model.CANDIDATE_NAME, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.YEARS_OF_EXP_TOTAL, "TOTAL YEARS OF EXP.", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.YEARS_OF_EXP_TOTAL, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @*@Html.ValidationMessageFor(model => model.YEARS_OF_EXP_TOTAL, "", new { @class = "text-danger" })*@
                    <span align="right" id="errMsgTotExp" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.CURRENT_COMPANY, "CURRENT COMPANY", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CURRENT_COMPANY, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @Html.ValidationMessageFor(model => model.CURRENT_COMPANY, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.MOBILE_NO, "MOBILE NO.", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.MOBILE_NO, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @Html.ValidationMessageFor(model => model.MOBILE_NO, "", new { @class = "text-danger" })
                    <span align="right" id="errMsgMob" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.EMAIL, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EMAIL, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @Html.ValidationMessageFor(model => model.EMAIL, "", new { @class = "text-danger" })
                    <span align="right" id="errMsgEmail" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "form-control date-picker", placeholder = "Select a date..." } })
                    @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger", @required = "mandatory" })
                    <span align="right" id="errMsgIsDuplicate" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group form-group-required">
                @Html.LabelFor(model => model.CURRENT_LOCATION, "CURRENT LOCATION", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.CURRENT_LOCATION, new { htmlAttributes = new { @class = "form-control", @required = "mandatory" } })
                    @Html.ValidationMessageFor(model => model.CURRENT_LOCATION, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.COMMENTS, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.COMMENTS, new { @class = "textarea-input-custom" })
                    @Html.ValidationMessageFor(model => model.COMMENTS, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.YEARS_OF_EXP_RELEVANT, "RELEVANT EXPERIENCE", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.YEARS_OF_EXP_RELEVANT, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.YEARS_OF_EXP_RELEVANT, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ALTERNATE_MOBILE_NO, "ALTERNATE MOBILE", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ALTERNATE_MOBILE_NO, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ALTERNATE_MOBILE_NO, "", new { @class = "text-danger" })
                    <span align="right" id="errMsgAltMob" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ALTERNATE_EMAIL_ID, "ALTERNATE EMAIL", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.ALTERNATE_EMAIL_ID, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ALTERNATE_EMAIL_ID, "", new { @class = "text-danger" })
                    <span align="right" id="errMsgAltEmail" class="text-danger"></span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ISINNOTICEPERIOD, "IS IN NOTICE PERIOD?", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <div class="checkbox">
                        <span><input type="radio" id="rdoIsNPYes" name="IsNP" checked="checked" value="Yes" />Yes</span>
                        <span><input type="radio" id="rdoIsNPNo" name="IsNP" value="No" />No</span>
                    </div>
                    
                </div>
            </div>

            <div class="form-group form-group-required" id="txtLWD">
                @Html.LabelFor(model => model.LAST_WORKING_DATE, "LAST WORKING DATE", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.LAST_WORKING_DATE, new { htmlAttributes = new { @class = "form-control date-picker", placeholder = "Select a date..." } })
                    <span align="right" id="errMsgLWD" class="text-danger"></span>
                </div>
            </div>

        <div class="form-group form-group-required hide" id="txtNP">
            @Html.LabelFor(model => model.NOTICE_PERIOD, "NOTICE PERIOD", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select id="ddlNoticePeriod" name="ddlNoticePeriod" class="form-control">
                    <option value="">Select Notice Period</option>
                    <option value="1W">1 WEEK</option>
                    <option value="15D">15 DAYS</option>
                    <option value="30D">30 DAYS</option>
                    <option value="45D">45 DAYS</option>
                    <option value="60D">60 DAYS</option>
                    <option value="90D">90 DAYS</option>
                </select>
                <span align="right" id="errMsgNP" class="text-danger"></span>
            </div>
        </div>
       
        <div class="form-group form-group-required">
            <label for="file" class="control-label col-md-2">RESUME UPLOAD :</label>
            <div class="col-md-10">
                <input class="form-control" type="file" name="file" id="file" />
                <span align="right" id="errMsgCVUpload" class="text-danger"></span>
            </div>
        </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" id="btnCandiCreate" value="Create" class="btn btn-default" />
                    <input type="button" value="Clear" onclick="this.form.reset()" class="btn btn-default" />
                </div>
            </div>
        </div>
}

@if (Request.QueryString.Count > 0 && Request.QueryString["styp"] == "H")
{
    @Html.ActionLink("Back to List", "Index", "Home")
}
else if (isSuperAdmin)
{
    @Html.ActionLink("Back to List", "Index", "Job")
}
else
{
    @Html.ActionLink("Back to List", "Index")
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
<script src="~/Scripts/moment.js"></script>
<script src="~/Scripts/bootstrap-datetimepicker.js"></script>
    <script lang="ja" type="text/javascript">
        $(document).ready(function () {

            $('#rdoIsNPYes').click(function () {
                $('#txtNP').hasClass('hide') ? "" : $('#txtNP').removeClass('show') && $('#txtNP').addClass('hide');
                $('#txtLWD').hasClass('hide') ? $('#txtLWD').removeClass('hide') && $('#txtLWD').addClass('show'):"";
            });

            $('#rdoIsNPNo').click(function () {
                $('#txtNP').hasClass('hide') ? $('#txtNP').removeClass('hide') && $('#txtNP').addClass('show'):"";
                $('#txtLWD').hasClass('hide') ? "" : $('#txtLWD').removeClass('show') && $('#txtLWD').addClass('hide');
                $("#LAST_WORKING_DATE").val('');
            });

            $("#btnCandiCreate").click(function () {
                var dtEmail = $("#EMAIL").val(), dtAltEmail = $("#ALTERNATE_EMAIL_ID").val(), dtPh = $("#MOBILE_NO").val(), dtAltPh = $("#ALTERNATE_MOBILE_NO").val();
                clearCandidateInput();
                if (dtEmail != "" && !validateEmail(dtEmail)) {
                    $("#errMsgEmail").text("Invalid Email.");
                    return false;
                } else if (dtAltEmail != "" && !validateEmail(dtAltEmail)) {
                    $("#errMsgAltEmail").text("Invalid Email.");
                    return false;
                }
                else if (dtPh != "" && !validatePhone(dtPh)) {
                    $("#errMsgMob").text("Invalid Phone No.");
                    return false;
                } else if (dtAltPh != "" && !validatePhone(dtAltPh)) {
                    $("#errMsgAltMob").text("Invalid Phone No.");
                    return false;
                }
                else if ($("#YEARS_OF_EXP_TOTAL").val() == "") {
                    $("#errMsgTotExp").focus();
                    $("#errMsgTotExp").text("This field is required.");
                    return false;
                }
                else if ($("#rdoIsNPYes").is(":Checked") && !validateLWD()) {
                    return false;
                } else if ($("#rdoIsNPNo").is(":Checked") && $("#ddlNoticePeriod").val() == "") {
                    $("#errMsgNP").text("Notice Period is required.");
                    return false;
                } else if ($("#file").val() == "") {
                    $("#errMsgCVUpload").text("Please upload a resume.");
                    return false;
                }
                else if (!validateDOB()) {
                    return false;
                }
                else {
                    IsDuplicateProf();
                    if ($("#hdnIsValidated").val() != "") {
                        $("#CandidateForm").submit()
                    }
                    else { return false; }
                }
            });

            window.clearCandidateInput = function ()
            {
                $("#errMsgTotExp").text(""); $("#errMsgEmail").text(""); $("#errMsgAltEmail").text("");
                $("#errMsgAltMob").text(""); $("#errMsgMob").text(""); $("#errMsgCVUpload").text(""); $("#errMsgNP").text("");
            };

            window.validateEmail = function(dt){
                var filter = /^[a-zA-Z0-9_.-]+@@[a-zA-Z0-9]+[a-zA-Z0-9.-]+[a-zA-Z0-9]+.[a-z]{0,4}$/;
            if(filter.test(dt)){
                return true;
            }
            else{
                return false;
            }
            };

            window.validateLWD = function ()
            {
                $("#errMsgLWD").text("");
                var lwd = $("#LAST_WORKING_DATE").val();
                if (lwd == "") {
                    $("#errMsgLWD").text("Last working date is required.");
                    return false;
                } else if (lwd != "") {
                    var _now = new Date(), day = _now.getDate().toString(), month = (1 + _now.getMonth()).toString();
                    day = day.length > 1 ? day : '0' + day;
                    month = month.length > 1 ? month : '0' + month;
                    if (lwd < (month + '/' + day + '/' + _now.getFullYear())) {
                        $("#errMsgLWD").text("Last working date is invalid.");
                        return false;
                    }
                    else { return true;}
                   }
                };

            window.validateDOB = function () {
                var value = $("#DOB").val();
                if (value != "") {
                    var year = value.split('/');
                    if (parseInt(year[2]) >= 2000) {
                        $("#errMsgIsDuplicate").text("DOB is not valid.");
                        return false;
                    }
                    else {
                        $("#errMsgIsDuplicate").text("");
                        return true;
                    }
                }
                else {
                    $("#errMsgIsDuplicate").text("The DOB field is required.");
                    return false;
                }
            };

            window.validatePhone = function (dt) {
                //validate phone
                var intRegex = /^\(?(\d{3})\)?[- ]?(\d{3})[- ]?(\d{4})$/;
                if ((dt.length < 6) || (!intRegex.test(dt))) {
                    return false;
                }
                else { return true;}
            };

            $('#DOB').on('blur', function () {
                $("#hdnIsValidated").val("");
                if(validateDOB()){
                   IsDuplicateProf();
               }
            });

            $('#MOBILE_NO').on('blur', function () {
                IsDuplicateProf();
            });

            function IsDuplicateProf() {
                $("#errMsgIsDuplicate").text("");
                if ($("#MOBILE_NO").val() != "" && $("#DOB").val() != "")
                {
                    $.get("/Candidate/IsCandidateDuplicate", { mob: $("#MOBILE_NO").val(), dob: $("#DOB").val() },
                        function (data) {
                           if (!data.IsDuplicate){
                               $("#errMsgIsDuplicate").text("");
                               $("#hdnIsValidated").val("valid");
                               return true;
                           }
                           else {
                               $("#errMsgIsDuplicate").text("This candidate's profile is already exist in database.");
                               $("#hdnIsValidated").val("");
                               return false;
                           }
                   });
                }
            };

        $('.date-picker').datetimepicker({
            format: 'MM/DD/YYYY'
        });

    });
    </script>
}